{"version":3,"sources":["components/UI/Card.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesFilter.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","title","amount","ExpenseFilter","value","selected","onChange","event","onChangeFilter","target","Expenses","useState","filteredYear","setFilteredYear","filteredExpenses","items","filter","expense","toString","selectedYear","map","id","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","max","NewExpense","enteredExpenseData","Math","random","onAddExpense","DUMMY_EXPENSES","App","expenses","setExpenses","prevExpenses","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d8c3db26.chunk.js","sourcesContent":["import \"./Card.css\";\r\n\r\n// компонент для передачи стилей внитри Card???\r\n\r\nfunction Card(props) {\r\n    const classes = 'card ' + props.className;\r\n    return <div className={classes}>{props.children}</div>\r\n}\r\n\r\nexport default Card;","import \"./ExpenseDate.css\"\r\n\r\n// Block in expenses list - Date: month, year, day\r\n\r\nfunction ExpenseDate(props) {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n\r\n  return (\r\n  <div className=\"expense-date\">\r\n    <div className=\"expense-date__month\">{month}</div>\r\n    <div className=\"expense-date__year\">{year}</div>\r\n    <div className=\"expense-date__day\">{day}</div>\r\n  </div>\r\n  )\r\n};\r\n\r\nexport default ExpenseDate;","\r\nimport './ExpenseItem.css';\r\nimport Card from \"../UI/Card\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\n\r\n// Block expenses list : date, title, price\r\n\r\nfunction ExpenseItem(props) {\r\n  return (\r\n    <Card className=\"expense-item\">\r\n      <ExpenseDate date={props.date} />\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n","import React from 'react';\r\nimport './ExpensesFilter.css';\r\n\r\n// Block Filter by year with selector\r\n\r\nconst ExpenseFilter = (props) => {\r\n  const dropdownChangeHandler = (event) => {\r\n    props.onChangeFilter(event.target.value);\r\n  };\r\n    return (\r\n        <div className='expenses-filter'>\r\n          <div className='expenses-filter__control'>\r\n            <label>Filter by year</label>\r\n            <select value={props.selected} onChange={dropdownChangeHandler}>\r\n              <option value='2022'>2022</option>\r\n              <option value='2021'>2021</option>\r\n              <option value='2020'>2020</option>\r\n              <option value='2019'>2019</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      );\r\n};\r\n\r\nexport default ExpenseFilter;","import { useState } from \"react\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport Card from \"../UI/Card\";\r\nimport \"./Expenses.css\";\r\n\r\n//    блок с затратами: общий блок для списка затрат и фильтра с селектором годов\r\n\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\nconst filteredExpenses = props.items.filter(expense => {\r\n  return expense.date.getFullYear().toString() === filteredYear;\r\n});\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n        {filteredExpenses.map((expense) => (\r\n          <ExpenseItem\r\n            key={expense.id}\r\n            title={expense.title}\r\n            amount={expense.amount}\r\n            date={expense.date}\r\n          />\r\n        ))}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n","import { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n                         \r\n                        // Форма расходов\r\n                        // поля импута: Заголовок, сумма, дата \r\n                        // кнопка сабмит \r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  // const [userInput, setUserInput] = useState({\r\n  //     enteredTitle: '',\r\n  //     enteredAmount: '',\r\n  //     enteredDate: '',\r\n  // })\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);     // присвоили значение происходящие(событие) в консоле при вводе значения в импут Заголовка\r\n    // setUserInput({\r\n    //     ...userInput,\r\n    //     enteredTitle: event.target.value,\r\n    // })\r\n    // setUserInput((prevState) => {\r\n    //     return { ...prevState, enteredTitle: event.target.value };\r\n    // });\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n    // setUserInput({\r\n    //     ...userInput,\r\n    //     enteredAmount: event.target.value,\r\n    // })\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({\r\n    //     ...userInput,\r\n    // //     enteredDate: event.target.value,\r\n    // })\r\n  };\r\n\r\n  const submitHandler = (event) => {       // обработчик подтверждения \r\n    event.preventDefault();               // preventDefault - предотвращаем обновление стр. при нажатии кнопки подтверждения\r\n\r\n    const expenseData = {                 // сбор введенных данных в один объект при нажатии сабмит\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle('');                  // после сабмита оставляем в полях ввода пустую строку\r\n    setEnteredAmount('');\r\n    setEnteredDate('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React from \"react\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport \"./NewExpense.css\";\r\n\r\n// Новая затрата компонент - функция: сохранение данных вводимых в форму (title, amount, date)\r\n// для последующего добавления в список затрат\r\n\r\nconst NewExpense = (props) => {\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddExpense(expenseData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import React, { useState } from \"react\";\r\nimport Expenses from \"./components/Expenses/Expenses\";\r\nimport NewExpense from \"./components/NewExpense/NewExpense\";\r\n\r\nconst DUMMY_EXPENSES = [\r\n  {\r\n    id: \"e1\",\r\n    title: \"Toilet Paper\",\r\n    amount: 94.12,\r\n    date: new Date(2020, 7, 14),\r\n  },\r\n  {\r\n    id: \"e2\",\r\n    title: \"New TV\",\r\n    amount: 799.49,\r\n    date: new Date(2021, 2, 12),\r\n  },\r\n  {\r\n    id: \"e3\",\r\n    title: \"Car Insurance\",\r\n    amount: 294.67,\r\n    date: new Date(2021, 2, 28),\r\n  },\r\n  {\r\n    id: \"e4\",\r\n    title: \"New Desk (Wooden)\",\r\n    amount: 450,\r\n    date: new Date(2021, 5, 12),\r\n  },\r\n];\r\n\r\nfunction App() {\r\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\r\n\r\n  const addExpenseHandler = (expense) => {\r\n    setExpenses((prevExpenses) => {\r\n      return [expense, ...prevExpenses];\r\n    });\r\n  };\r\n  // return React.createElement(\r\n  //   'div',\r\n  //   {},\r\n  //   React.createElement('h2', {}, \"Let's get started!\"),\r\n  //   React.createElement(Expenses, { items: expenses } )\r\n  // );   // 42. A Closer Look At JSX\r\n\r\n  return (\r\n    <div>\r\n      <NewExpense onAddExpense={addExpenseHandler} />\r\n      <Expenses items={expenses} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom/client';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(<App />);\r\n"],"sourceRoot":""}